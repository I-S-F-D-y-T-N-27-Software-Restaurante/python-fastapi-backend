class User(Base):
    __tablename__ = "users"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    name: Mapped[str] = mapped_column(String, nullable=False)
    email: Mapped[str] = mapped_column(String, unique=True, nullable=False)
    password: Mapped[str] = mapped_column(String, nullable=False)

    waiter_profile: Mapped["Waiter"] = relationship(
        "Waiter",
        back_populates="user",
        uselist=False,
    )
    cook_profile: Mapped["Cook"] = relationship(
        "Cook", back_populates="user", uselist=False
    )
    cashier_profile: Mapped["Cashier"] = relationship(
        "Cashier",
        back_populates="user",
        uselist=False,
    )

    created_at: Mapped[datetime] = mapped_column(
        DateTime, default=lambda: datetime.now(timezone.utc)
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime,
        default=lambda: datetime.now(timezone.utc),
        onupdate=lambda: datetime.now(timezone.utc),
    )
    deleted_at: Mapped[datetime | None] = mapped_column(DateTime, nullable=True)


class Waiter(Base):
    __tablename__ = "waiters"

    id: Mapped[int] = mapped_column(
        Integer, primary_key=True, autoincrement=True, unique=True
    )

    user_id: Mapped[int] = mapped_column(Integer, ForeignKey("users.id"))
    user: Mapped["User"] = relationship("User", back_populates="waiter_profile")

    tables: Mapped[list["RestorantTable"]] = relationship(
        "RestorantTable", back_populates="waiter"
    )
    orders: Mapped[list["Order"]] = relationship("Order", back_populates="waiter")


class Cashier(Base):
    __tablename__ = "cashiers"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(Integer, ForeignKey("users.id"))
    user: Mapped["User"] = relationship("User", back_populates="cashier_profile")

    payments: Mapped[list["Payment"]] = relationship(
        "Payment", back_populates="cashier"
    )


class Cook(Base):
    __tablename__ = "cooks"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(Integer, ForeignKey("users.id"))

    user: Mapped["User"] = relationship("User", back_populates="cook_profile")

    preparations: Mapped[list["Preparation"]] = relationship(
        "Preparation", back_populates="cook"
    )
